<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/ruby

TM_SCOPE = ENV['TM_SCOPE'].split(' ')

def markdown?
  return @markdown if instance_variable_defined?(:@markdown)
  @markdown = TM_SCOPE.include?('text.html.markdown')    
end

STDIN.each_line do |line|
  if markdown?
    # Leave escaped whitespace character at the end of the line, and remove
    # trailing whitespace characters, except for two if there was an escaped 
    # whitespace character followed by at least two whitespace characters.
    line.sub!(/((?&lt;=\\[\t\ ])[\t ]|(?&lt;=\\[\t\ ]{3})[\t ]+)$/, '')
    
    # Remove trailing whitespace characters, except for two to preserve line breaks,
    # and leave whitespace-only lines to preserve indentation.
    line.sub!(/(?&lt;=[^\\\t \ ][\t ]{2})[\t ]+$/, '')
    
    # Remove single trailing whitespace characters ,
    # and leave whitespace-only lines to preserve indentation.
    line.sub!(/(?&lt;=[^\\\t \ ])[\t ]$/, '')
  else
    # Remove trailing whitespace characters, except for one if there  
    # is an escaped whitespace character at the end of the line.
    line.sub!(/(?&lt;!\\)[\t ]+$/, '')
  end
  
  print line
end
</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>name</key>
	<string>Strip Trailing Whitespace</string>
	<key>outputCaret</key>
	<string>interpolateByLine</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>replaceDocument</string>
	<key>semanticClass</key>
	<string>callback.document.will-save</string>
	<key>uuid</key>
	<string>4B145342-1E44-4B8B-8E28-4F7E1458F546</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
